{"/home/travis/build/npmtest/node-npmtest-shell/test.js":"/* istanbul instrument in package npmtest_shell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-shell/lib.npmtest_shell.js":"/* istanbul instrument in package npmtest_shell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_shell = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_shell = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-shell/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-shell && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_shell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_shell\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_shell.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_shell.rollup.js'] =\n            local.assetsDict['/assets.npmtest_shell.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_shell.__dirname + '/lib.npmtest_shell.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/index.js":"\n// Core\nvar Shell = module.exports = require('./lib/Shell');\nShell.styles = require('./lib/Styles');\nShell.NullStream = require('./lib/NullStream');\n\n// Plugins\nShell.cloud9 = require('./lib/plugins/cloud9');\nShell.coffee = require('./lib/plugins/coffee');\nShell.completer = require('./lib/plugins/completer');\nShell.error = require('./lib/plugins/error');\nShell.help = require('./lib/plugins/help');\nShell.history = require('./lib/plugins/history');\nShell.http = require('./lib/plugins/http');\nShell.router = require('./lib/plugins/router');\nShell.redis = require('./lib/plugins/redis');\nShell.stylus = require('./lib/plugins/stylus');\nShell.test = require('./lib/plugins/test');\n\n// Routes\nShell.routes = {\n  confirm: require('./lib/routes/confirm'),\n  prompt: require('./lib/routes/prompt'),\n  shellOnly: require('./lib/routes/shellOnly')\n};\n\nShell.Shell = function(settings){\n  console.warn('Deprecated, use `shell()` instead of `shell.Shell()`');\n  return new Shell( settings );\n};","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/Shell.js":"// Generated by CoffeeScript 1.4.0\nvar EventEmitter, Interface, Request, Response, Shell, events, readline, styles, util, utils,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nutil = require('util');\n\nreadline = require('readline');\n\nevents = require('events');\n\nEventEmitter = events.EventEmitter;\n\nutils = require('./utils');\n\nstyles = require('./Styles');\n\nRequest = require('./Request');\n\nResponse = require('./Response');\n\nInterface = require('readline').Interface;\n\nInterface.prototype.setPrompt = (function(parent) {\n  return function(prompt, length) {\n    var args;\n    args = Array.prototype.slice.call(arguments);\n    if (!args[1]) {\n      args[1] = styles.unstyle(args[0]).length;\n    }\n    return parent.apply(this, args);\n  };\n})(Interface.prototype.setPrompt);\n\nmodule.exports = Shell = (function(_super) {\n\n  __extends(Shell, _super);\n\n  function Shell(settings) {\n    var _base, _base1, _base2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,\n      _this = this;\n    if (settings == null) {\n      settings = {};\n    }\n    if (!(this instanceof Shell)) {\n      return new Shell(settings);\n    }\n    EventEmitter.call(this);\n    this.tmp = {};\n    this.settings = settings;\n    if ((_ref = (_base = this.settings).prompt) == null) {\n      _base.prompt = '>> ';\n    }\n    if ((_ref1 = (_base1 = this.settings).stdin) == null) {\n      _base1.stdin = process.stdin;\n    }\n    if ((_ref2 = (_base2 = this.settings).stdout) == null) {\n      _base2.stdout = process.stdout;\n    }\n    this.set('env', (_ref3 = (_ref4 = this.settings.env) != null ? _ref4 : process.env.NODE_ENV) != null ? _ref3 : 'development');\n    this.set('command', typeof settings.command !== 'undefined' ? settings.command : process.argv.slice(2).join(' '));\n    this.stack = [];\n    this.styles = styles({\n      stdout: this.settings.stdout\n    });\n    process.on('beforeExit', function() {\n      return _this.emit('exit');\n    });\n    process.on('uncaughtException', function(e) {\n      _this.emit('exit', [e]);\n      _this.styles.red('Internal error, closing...').ln();\n      console.error(e.message);\n      console.error(e.stack);\n      return process.exit();\n    });\n    this.isShell = (_ref5 = this.settings.isShell) != null ? _ref5 : process.argv.length === 2;\n    if (this.isShell) {\n      this[\"interface\"]();\n    }\n    if ((_ref6 = settings.workspace) == null) {\n      settings.workspace = utils.workspace();\n    }\n    if (settings.chdir === true) {\n      process.chdir(settings.workspace);\n    }\n    if (typeof settings.chdir === 'string') {\n      process.chdir(settings.chdir);\n    }\n    process.nextTick(function() {\n      var command, noPrompt;\n      if (_this.isShell) {\n        command = _this.set('command');\n        noPrompt = _this.set('noPrompt');\n        if (command) {\n          return _this.run(command);\n        } else if (!noPrompt) {\n          return _this.prompt();\n        }\n      } else {\n        command = _this.set('command');\n        if (command) {\n          return _this.run(command);\n        }\n      }\n    });\n    return this;\n  }\n\n  Shell.prototype[\"interface\"] = function() {\n    if (this._interface != null) {\n      return this._interface;\n    }\n    return this._interface = readline.createInterface(this.settings.stdin, this.settings.stdout);\n  };\n\n  Shell.prototype.configure = function(env, fn) {\n    if (typeof env === 'function') {\n      fn = env;\n      env = 'all';\n    }\n    if (env === 'all' || env === this.settings.env) {\n      fn.call(this);\n    }\n    return this;\n  };\n\n  Shell.prototype.use = function(handle) {\n    if (handle) {\n      this.stack.push({\n        route: null,\n        handle: handle\n      });\n    }\n    return this;\n  };\n\n  Shell.prototype.cmds = {};\n\n  Shell.prototype.run = function(command) {\n    var index, next, req, res, self;\n    command = command.trim();\n    this.emit('command', [command]);\n    this.emit(command, []);\n    self = this;\n    req = new Request(this, command);\n    res = new Response({\n      shell: this,\n      stdout: this.settings.stdout\n    });\n    index = 0;\n    next = function(err) {\n      var arity, layer, text;\n      layer = self.stack[index++];\n      if (!layer) {\n        if (err) {\n          return self.emit('error', err);\n        }\n        if (command !== '') {\n          text = \"Command failed to execute \" + command;\n          if (err) {\n            text += \": \" + (err.message || err.name);\n          }\n          res.red(text);\n        }\n        return res.prompt();\n      }\n      arity = layer.handle.length;\n      if (err) {\n        if (arity === 4) {\n          self.emit('error', err);\n          return layer.handle(err, req, res, next);\n        } else {\n          return next(err);\n        }\n      } else if (arity < 4) {\n        return layer.handle(req, res, next);\n      } else {\n        return next();\n      }\n    };\n    return next();\n  };\n\n  Shell.prototype.set = function(setting, val) {\n    if (!(val != null)) {\n      if (this.settings.hasOwnProperty(setting)) {\n        return this.settings[setting];\n      } else if (this.parent) {\n        return this.parent.set(setting);\n      }\n    } else {\n      this.settings[setting] = val;\n      return this;\n    }\n  };\n\n  Shell.prototype.prompt = function() {\n    var text;\n    if (this.isShell) {\n      text = this.styles.raw(this.settings.prompt, {\n        color: 'green'\n      });\n      return this[\"interface\"]().question(text, this.run.bind(this));\n    } else {\n      this.styles.ln();\n      if (process.versions) {\n        return this.quit();\n      } else {\n        this.settings.stdout.destroySoon();\n        return this.settings.stdout.on('close', function() {\n          return process.exit();\n        });\n      }\n    }\n  };\n\n  Shell.prototype.quit = function(params) {\n    this.emit('quit');\n    this[\"interface\"]().close();\n    return this.settings.stdin.destroy();\n  };\n\n  return Shell;\n\n})(EventEmitter);\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/utils.js":"// Generated by CoffeeScript 1.4.0\nvar existsSync, fs, path;\n\nfs = require('fs');\n\npath = require('path');\n\nexistsSync = fs.existsSync || path.existsSync;\n\nmodule.exports = {\n  flatten: function(arr, ret) {\n    var i, _i, _ref;\n    if (ret == null) {\n      ret = [];\n    }\n    for (i = _i = 0, _ref = arr.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n      if (Array.isArray(arr[i])) {\n        this.flatten(arr[i], ret);\n      } else {\n        ret.push(arr[i]);\n      }\n    }\n    return ret;\n  },\n  workspace: function() {\n    var dir, dirs, _i, _len;\n    dirs = require('module')._nodeModulePaths(process.argv[1]);\n    for (_i = 0, _len = dirs.length; _i < _len; _i++) {\n      dir = dirs[_i];\n      if (existsSync(dir) || existsSync(path.normalize(dir + '/../package.json'))) {\n        return path.normalize(dir + '/..');\n      }\n    }\n  },\n  checkPort: function(port, host, callback) {\n    var cmd;\n    cmd = exec(\"nc \" + host + \" \" + port + \" < /dev/null\");\n    return cmd.on('exit', function(code) {\n      if (code === 0) {\n        return callback(true);\n      }\n      if (code === 1) {\n        return callback(false);\n      }\n      return callback(new Error('The nc (or netcat) utility is required'));\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/Styles.js":"// Generated by CoffeeScript 1.4.0\nvar Styles, bgcolors, code, color, colors, _fn;\n\ncolors = {\n  black: 30,\n  red: 31,\n  green: 32,\n  yellow: 33,\n  blue: 34,\n  magenta: 35,\n  cyan: 36,\n  white: 37\n};\n\nbgcolors = {\n  black: 40,\n  red: 41,\n  green: 42,\n  yellow: 43,\n  blue: 44,\n  magenta: 45,\n  cyan: 46,\n  white: 47\n};\n\nmodule.exports = Styles = function(settings) {\n  var _ref;\n  if (settings == null) {\n    settings = {};\n  }\n  if (!(this instanceof Styles)) {\n    return new Styles(settings);\n  }\n  this.settings = settings;\n  this.settings.stdout = (_ref = settings.stdout) != null ? _ref : process.stdout;\n  this.current = {\n    weight: 'regular'\n  };\n  this.colors = colors;\n  this.bgcolors = bgcolors;\n  return this;\n};\n\nStyles.prototype.color = function(color, text) {\n  this.print(text, {\n    color: color\n  });\n  if (!text) {\n    this.current.color = color;\n  }\n  return this;\n};\n\n_fn = function(color) {\n  return Styles.prototype[color] = function(text) {\n    return this.color(color, text);\n  };\n};\nfor (color in colors) {\n  code = colors[color];\n  _fn(color);\n}\n\nStyles.prototype.nocolor = function(text) {\n  return this.color(null, text);\n};\n\nStyles.prototype.bgcolor = function(bgcolor) {\n  if (bgcolor == null) {\n    bgcolor = 0;\n  }\n  this.print('\\x1B[' + bgcolor + ';m39');\n  return this;\n};\n\nStyles.prototype.weight = function(weight, text) {\n  this.print(text, {\n    weight: weight\n  });\n  if (!text) {\n    this.current.weight = weight;\n  }\n  return this;\n};\n\nStyles.prototype.bold = function(text) {\n  return this.weight('bold', text);\n};\n\nStyles.prototype.regular = function(text) {\n  return this.weight('regular', text);\n};\n\nStyles.prototype.print = function(text, settings) {\n  this.settings.stdout.write(this.raw(text, settings));\n  return this;\n};\n\nStyles.prototype.println = function(text) {\n  this.settings.stdout.write(text + '\\n');\n  return this;\n};\n\nStyles.prototype.ln = function() {\n  this.settings.stdout.write('\\n');\n  return this;\n};\n\nStyles.prototype.raw = function(text, settings) {\n  var raw;\n  raw = '';\n  if (settings == null) {\n    settings = {};\n  }\n  if (settings.color !== null && (settings.color || this.current.color)) {\n    raw += '\\x1b[' + this.colors[settings.color || this.current.color] + 'm';\n  } else {\n    raw += '\\x1b[39m';\n  }\n  switch (settings.weight || this.current.weight) {\n    case 'bold':\n      raw += '\\x1b[1m';\n      break;\n    case 'regular':\n      raw += '\\x1b[22m';\n      break;\n    default:\n      throw new Error('Invalid weight \"' + weight + '\" (expect \"bold\" or \"regular\")');\n  }\n  if (text) {\n    raw += text;\n    if (this.current.color && this.current.color !== settings.color) {\n      raw += this.raw(null, this.current.color);\n    }\n    if (this.current.weight && this.current.weight !== settings.weight) {\n      raw += this.raw(null, this.current.weight);\n    }\n  }\n  return raw;\n};\n\nStyles.prototype.reset = function(text) {\n  return this.print(null, {\n    color: null,\n    weight: 'regular'\n  });\n};\n\nStyles.unstyle = function(text) {\n  return text.replace(/\\x1b.*?m/g, '');\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/Request.js":"// Generated by CoffeeScript 1.4.0\nvar Request, each;\n\neach = require('each');\n\nmodule.exports = Request = (function() {\n\n  function Request(shell, command) {\n    this.shell = shell;\n    this.command = command;\n  }\n\n  /*\n    Ask one or more questions\n  */\n\n\n  Request.prototype.question = function(questions, callback) {\n    var answers, isObject, multiple, q, v,\n      _this = this;\n    isObject = function(v) {\n      return typeof v === 'object' && (v != null) && !Array.isArray(v);\n    };\n    multiple = true;\n    answers = {};\n    if (isObject(questions)) {\n      questions = (function() {\n        var _results;\n        _results = [];\n        for (q in questions) {\n          v = questions[q];\n          if (v == null) {\n            v = {};\n          }\n          if (!isObject(v)) {\n            v = {\n              value: v\n            };\n          }\n          v.name = q;\n          _results.push(v);\n        }\n        return _results;\n      })();\n    } else if (typeof questions === 'string') {\n      multiple = false;\n      questions = [\n        {\n          name: questions,\n          value: ''\n        }\n      ];\n    }\n    return each(questions).on('item', function(question, next) {\n      q = \"\" + question.name + \" \";\n      if (question.value) {\n        q += \"[\" + question.value + \"] \";\n      }\n      return _this.shell[\"interface\"]().question(q, function(answer) {\n        if (answer.substr(-1, 1) === '\\n') {\n          answer = answer.substr(0, answer.length - 1);\n        }\n        answers[question.name] = answer === '' ? question.value : answer;\n        return next();\n      });\n    }).on('end', function() {\n      if (!multiple) {\n        answers = answers[questions[0].name];\n      }\n      return callback(answers);\n    });\n  };\n\n  /*\n    Ask a question expecting a boolean answer\n  */\n\n\n  Request.prototype.confirm = function(msg, defaultTrue, callback) {\n    var args, keyFalse, keyTrue, key_false, key_true, question, _base, _base1, _ref, _ref1,\n      _this = this;\n    args = arguments;\n    if (!callback) {\n      callback = defaultTrue;\n      defaultTrue = true;\n    }\n    if ((_ref = (_base = this.shell.settings).key_true) == null) {\n      _base.key_true = 'y';\n    }\n    if ((_ref1 = (_base1 = this.shell.settings).key_false) == null) {\n      _base1.key_false = 'n';\n    }\n    key_true = this.shell.settings.key_true.toLowerCase();\n    key_false = this.shell.settings.key_false.toLowerCase();\n    keyTrue = defaultTrue ? key_true.toUpperCase() : key_true;\n    keyFalse = defaultTrue ? key_false : key_false.toUpperCase();\n    msg += ' ';\n    msg += \"[\" + keyTrue + keyFalse + \"] \";\n    question = this.shell.styles.raw(msg, {\n      color: 'green'\n    });\n    return this.shell[\"interface\"]().question(question, function(answer) {\n      var accepted, valid;\n      accepted = ['', key_true, key_false];\n      if (answer.substr(-1, 1) === '\\n') {\n        answer = answer.substr(0, answer.length - 1);\n      }\n      answer = answer.toLowerCase();\n      valid = accepted.indexOf(answer) !== -1;\n      if (!valid) {\n        return _this.confirm.apply(_this, args);\n      }\n      return callback(answer === key_true || (defaultTrue && answer === ''));\n    });\n  };\n\n  return Request;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/Response.js":"// Generated by CoffeeScript 1.4.0\nvar Response, pad, styles,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nstyles = require('./Styles');\n\npad = require('pad');\n\nmodule.exports = Response = (function(_super) {\n\n  __extends(Response, _super);\n\n  function Response(settings) {\n    this.shell = settings.shell;\n    Response.__super__.constructor.call(this, settings);\n  }\n\n  Response.prototype.pad = pad;\n\n  Response.prototype.prompt = function() {\n    return this.shell.prompt();\n  };\n\n  return Response;\n\n})(styles);\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/NullStream.js":"// Generated by CoffeeScript 1.4.0\nvar NullStream, events,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nevents = require('events');\n\nmodule.exports = NullStream = (function(_super) {\n\n  __extends(NullStream, _super);\n\n  function NullStream() {\n    return NullStream.__super__.constructor.apply(this, arguments);\n  }\n\n  NullStream.prototype.readable = true;\n\n  NullStream.prototype.pause = function() {};\n\n  NullStream.prototype.resume = function() {};\n\n  NullStream.prototype.pipe = function() {};\n\n  NullStream.prototype.writable = true;\n\n  NullStream.prototype.write = function(data) {\n    return this.emit('data', data);\n  };\n\n  NullStream.prototype.end = function() {\n    return this.emit('close');\n  };\n\n  NullStream.prototype.destroy = function() {};\n\n  NullStream.prototype.destroySoon = function() {};\n\n  return NullStream;\n\n})(events.EventEmitter);\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/plugins/cloud9.js":"// Generated by CoffeeScript 1.4.0\nvar start_stop;\n\nstart_stop = require('../start_stop');\n\n/*\n\nCloud9 plugin\n=============\n\nRegister two commands, `cloud9 start` and `cloud9 stop`. Unless provided, \nthe Cloud9 workspace will be automatically discovered if your project root \ndirectory contains a \"package.json\" file or a \"node_module\" directory.\n\nOptions:\n\n-   `config`   , Load the configuration from a config file. Overrides command-line options. Defaults to `null`.\n-   `group`    , Run child processes with a specific group.\n-   `user`     , Run child processes as a specific user.\n-   `action`   , Define an action to execute after the Cloud9 server is started. Defaults to `null`.\n-   `ip`       , IP address where Cloud9 will serve from. Defaults to `\"127.0.0.1\"`.\n-   `port`     , Port number where Cloud9 will serve from. Defaults to `3000`.\n-   `workspace`, Path to the workspace that will be loaded in Cloud9, Defaults to `Shell.set('workspace')`.\n-   `detached` , Wether the Cloud9 process should be attached to the current process. If not defined, default to `false` (the server doesn't run as a daemon).\n-   `pidfile`  , Path to the file storing the daemon process id. Defaults to `\"/.node_shell/#{md5}.pid\"`\n-   `stdout`   , Writable stream or file path to redirect cloud9 stdout.\n-   `stderr`   , Writable stream or file path to redirect cloud9 stderr.\n\nExample:\n\n```javascript\nvar app = new shell();\napp.configure(function() {\n  app.use(shell.router({\n    shell: app\n  }));\n  app.use(shell.cloud9({\n    shell: app,\n    ip: '0.0.0.0'\n  }));\n  app.use(shell.help({\n    shell: app,\n    introduction: true\n  }));\n});\n```\n\n**Important:** If you encounter issue while installing cloud9, it might be because the npm module expect an older version of Node. \n\nHere's the procedure to use the latest version:\n\n```\ngit clone https://github.com/ajaxorg/cloud9.git\ncd cloud9\ngit submodule update --init --recursive\nnpm link\n```\n*/\n\n\nmodule.exports = function(settings) {\n  var cmd;\n  if (settings == null) {\n    settings = {};\n  }\n  cmd = function() {\n    var args;\n    args = [];\n    args.push('-w');\n    args.push(settings.workspace);\n    if (settings.config) {\n      args.push('-c');\n      args.push(settings.config);\n    }\n    if (settings.group) {\n      args.push('-g');\n      args.push(settings.group);\n    }\n    if (settings.user) {\n      args.push('-u');\n      args.push(settings.user);\n    }\n    if (settings.action) {\n      args.push('-a');\n      args.push(settings.action);\n    }\n    if (settings.ip) {\n      args.push('-l');\n      args.push(settings.ip);\n    }\n    if (settings.port) {\n      args.push('-p');\n      args.push(settings.port);\n    }\n    return \"cloud9 \" + (args.join(' '));\n  };\n  return function(req, res, next) {\n    var app, _ref;\n    app = req.shell;\n    if (app.tmp.cloud9) {\n      return next();\n    }\n    app.tmp.cloud9 = true;\n    if ((_ref = settings.workspace) == null) {\n      settings.workspace = app.set('workspace');\n    }\n    if (!settings.workspace) {\n      return next(new Error('No workspace provided'));\n    }\n    settings.cmd = cmd();\n    app.cmd('cloud9 start', 'Start Cloud9', function(req, res, next) {\n      return start_stop.start(settings, function(err, pid) {\n        var ip, message, port;\n        if (err) {\n          return next(err);\n        }\n        if (!pid) {\n          res.cyan('Cloud9 already started').ln();\n          return res.prompt();\n        }\n        ip = settings.ip || '127.0.0.1';\n        port = settings.port || 3000;\n        message = \"Cloud9 started http://\" + ip + \":\" + port;\n        res.cyan(message).ln();\n        return res.prompt();\n      });\n    });\n    app.cmd('cloud9 stop', 'Stop Cloud9', function(req, res, next) {\n      return start_stop.stop(settings, function(err, success) {\n        if (success) {\n          res.cyan('Cloud9 successfully stoped').ln();\n        } else {\n          res.magenta('Cloud9 was not started').ln();\n        }\n        return res.prompt();\n      });\n    });\n    return next();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/start_stop.js":"// Generated by CoffeeScript 1.4.0\nvar crypto, exec, exists, fs, md5, path, spawn, start_stop, _ref;\n\ncrypto = require('crypto');\n\n_ref = require('child_process'), exec = _ref.exec, spawn = _ref.spawn;\n\nfs = require('fs');\n\npath = require('path');\n\nexists = fs.exists || path.exists;\n\nmd5 = function(cmd) {\n  return crypto.createHash('md5').update(cmd).digest('hex');\n};\n\n/*\n`start_stop`: Unix process management\n-------------------------------------\n\nThe library start and stop unix child process. Process are by default \ndaemonized and will keep running even if your current process exit. For \nconveniency, they may also be attached to the current process by \nproviding the `attach` option.\n*/\n\n\nmodule.exports = start_stop = {\n  /*\n  \n    `start(options, callback)`\n    --------------------------\n    Start a prcess as a daemon (default) or as a child of the current process. Options includes\n    all the options of the \"child_process.exec\" function plus a few specific ones.\n  \n    `options`         , Object with the following properties:\n    *   `cmd`         , Command to run\n    *   `cwd`         , Current working directory of the child process\n    *   `detached`    , Detached the child process from the current process\n    *   `pidfile`     , Path to the file storing the child pid\n    *   `stdout`      , Path to the file where standard output is redirected\n    *   `stderr`      , Path to the file where standard error is redirected\n    *   `strict`      , Send an error when a pid file exists and reference\n                  an unrunning pid.\n    *   `watch`       , Watch for file changes\n    *   `watchIgnore` , List of ignore files\n    \n    `callback`        , Received arguments are:\n    *   `err`         , Error if any\n    *   `pid`         , Process id of the new child\n  */\n\n  start: function(options, callback) {\n    var c, check_pid, child, cmdStderr, cmdStdout, start, stderr, stdout, watch;\n    if (options.attach != null) {\n      console.log('Option attach was renamed to attached to be consistent with the new spawn option');\n      options.detached = !options.attach;\n    }\n    if (options.detached) {\n      child = null;\n      cmdStdout = typeof options.stdout === 'string' ? options.stdout : '/dev/null';\n      cmdStderr = typeof options.stderr === 'string' ? options.stderr : '/dev/null';\n      check_pid = function() {\n        return start_stop.pid(options, function(err, pid) {\n          if (!pid) {\n            return watch();\n          }\n          return start_stop.running(pid, function(err, pid) {\n            if (pid) {\n              return callback(new Error(\"Pid \" + pid + \" already running\"));\n            }\n            if (options.strict) {\n              return callback(new Error(\"Pid file reference a dead process\"));\n            } else {\n              return watch();\n            }\n          });\n        });\n      };\n      watch = function() {\n        var ignore, ioptions;\n        if (!options.watch) {\n          return start();\n        }\n        if (typeof options.watch !== 'string') {\n          options.watch = options.cwd || process.cwd;\n        }\n        ioptions = {\n          path: options.watch,\n          ignoreFiles: [\".startstopignore\"] || options.watchIgnoreFiles\n        };\n        console.log('ioptions', ioptions);\n        ignore = require('fstream-ignore');\n        ignore(ioptions).on('child', function(c) {\n          console.log(c.path);\n          return fs.watchFile(c.path, function(curr, prev) {\n            console.log(c.path);\n            return start_stop.stop(options, function(e) {\n              return start_stop.start(options, function(e) {\n                return console.log('restarted', e);\n              });\n            });\n          });\n        });\n        return start();\n      };\n      start = function() {\n        var cmd, info, pipe;\n        pipe = \"</dev/null >\" + cmdStdout + \" 2>\" + cmdStdout;\n        info = 'echo $? $!';\n        cmd = \"\" + options.cmd + \" \" + pipe + \" & \" + info;\n        return child = exec(cmd, options, function(err, stdout, stderr) {\n          var code, msg, pid, _ref1;\n          _ref1 = stdout.split(' '), code = _ref1[0], pid = _ref1[1];\n          code = parseInt(code, 10);\n          pid = parseInt(pid, 10);\n          if (code !== 0) {\n            msg = \"Process exit with code \" + code;\n            return callback(new Error(msg));\n          }\n          return exists(path.dirname(options.pidfile), function(exists) {\n            if (!exists) {\n              return callback(new Error(\"Pid directory does not exist\"));\n            }\n            return fs.writeFile(options.pidfile, '' + pid, function(err) {\n              return callback(null, pid);\n            });\n          });\n        });\n      };\n      return check_pid();\n    } else {\n      c = exec(options.cmd);\n      if (typeof options.stdout === 'string') {\n        stdout = fs.createWriteStream(options.stdout);\n      } else if (options.stdout !== null && typeof options.stdout === 'object') {\n        stdout = options.stdout;\n      } else {\n        stdout = null;\n      }\n      if (typeof options.stderr === 'string') {\n        stdout = fs.createWriteStream(options.stderr);\n      } else if (options.stderr !== null && typeof options.stderr === 'object') {\n        stderr = options.stderr;\n      } else {\n        stderr = null;\n      }\n      return process.nextTick(function() {\n        options.pid = c.pid;\n        return callback(null, c.pid);\n      });\n    }\n  },\n  /*\n  \n    `stop(options, callback)`\n    -------------------------\n    Stop a process. In daemon mode, the pid is obtained from the `pidfile` option which, if \n    not provided, can be guessed from the `cmd` option used to start the process.\n  \n    `options`         , Object with the following properties:\n    *   `detached`    , Detach the child process to the current process\n    *   `cmd`         , Command used to run the process, in case no pidfile is provided\n    *   `pid`         , Pid to kill in attach mode\n    *   `pidfile`     , Path to the file storing the child pid\n    *   `strict`      , Send an error when a pid file exists and reference\n                  an unrunning pid.\n    \n    `callback`        , Received arguments are:\n    *   `err`         , Error if any\n    *   `stoped`      , True if the process was stoped\n  */\n\n  stop: function(options, callback) {\n    var kill;\n    if (options.attach != null) {\n      console.log('Option attach was renamed to attached to be consistent with the new spawn option');\n      options.detached = !options.attach;\n    }\n    if (typeof options === 'string' || typeof options === 'number') {\n      options = {\n        pid: parseInt(options, 10),\n        detached: false\n      };\n    }\n    kill = function(pid) {\n      var cmds;\n      cmds = \"for i in `ps -ef | awk '$3 == '\" + pid + \"' { print $2 }'`\\ndo\\n  kill $i\\ndone\\nkill \" + pid;\n      return exec(cmds, function(err, stdout, stderr) {\n        if (err) {\n          return callback(new Error(\"Unexpected exit code \" + err.code));\n        }\n        options.pid = null;\n        return callback(null, true);\n      });\n    };\n    if (options.detached) {\n      return start_stop.pid(options, function(err, pid) {\n        if (err) {\n          return callback(err);\n        }\n        if (!pid) {\n          return callback(null, false);\n        }\n        return fs.unlink(options.pidfile, function(err) {\n          if (err) {\n            return callback(err);\n          }\n          return start_stop.running(pid, function(err, running) {\n            if (!running) {\n              if (options.strict) {\n                return callback(new Error(\"Pid file reference a dead process\"));\n              } else {\n                return callback(null, false);\n              }\n            }\n            return kill(pid);\n          });\n        });\n      });\n    } else {\n      return kill(options.pid);\n    }\n  },\n  /*\n  \n    `pid(options, callback)`\n    ------------------------\n    Retrieve a process pid. The pid value is return only if the command is running \n    otherwise it is set to false.\n  \n    `options`       , Object with the following properties:\n    *   `detached`  , True if the child process is not attached to the current process\n    *   `cmd`       , Command used to run the process, in case no pidfile is provided\n    *   `pid`       , Pid to kill if not running in detached mode\n    *   `pidfile`   , Path to the file storing the child pid\n  \n  \n    `callback`      , Received arguments are:\n    *   `err`       , Error if any\n    *   `pid`       , Process pid. Pid is null if there are no pid file or \n                      if the process isn't running.\n  */\n\n  pid: function(options, callback) {\n    if (options.attach != null) {\n      console.log('Option attach was renamed to attached to be consistent with the new spawn option');\n      options.detached = !options.attach;\n    }\n    if (!options.detached) {\n      if (options.pid == null) {\n        return new Error('Expect a pid property in attached mode');\n      }\n      return callback(null, options.pid);\n    }\n    return start_stop.file(options, function(err, file, exists) {\n      if (!exists) {\n        return callback(null, false);\n      }\n      return fs.readFile(options.pidfile, 'ascii', function(err, pid) {\n        if (err) {\n          return callback(err);\n        }\n        pid = pid.trim();\n        return callback(null, pid);\n      });\n    });\n  },\n  /*\n  \n    `file(options, callback)`\n    -------------------------\n    Retrieve information relative to the file storing the pid. Retrieve \n    the path to the file storing the pid number and whether \n    it exists or not. Note, it will additionnaly enrich the `options`\n    argument with a pidfile property unless already present.\n  \n    `options`       , Object with the following properties:\n    *   `detached`  , True if the child process is not attached to the current process\n    *   `cmd`       , Command used to run the process, in case no pidfile is provided\n    *   `pid`       , Pid to kill in attach mode\n    *   `pidfile`   , Path to the file storing the child pid\n  \n    `callback`      , Received arguments are:\n    *   `err`       , Error if any\n    *   `path`      , Path to the file storing the pid, null in attach mode\n    *   `exists`    , True if the file is created\n  */\n\n  file: function(options, callback) {\n    var createDir, pidFileExists, start;\n    if (options.attach != null) {\n      console.log('Option attach was renamed to detached to be consistent with the spawn API');\n      options.detached = !options.attach;\n    }\n    if (!options.detached) {\n      return callback(null, null, false);\n    }\n    start = function() {\n      var dir, file;\n      if (options.pidfile) {\n        return pidFileExists();\n      }\n      dir = path.resolve(process.env['HOME'], '.node_shell');\n      file = md5(options.cmd);\n      options.pidfile = \"\" + dir + \"/\" + file + \".pid\";\n      return exists(dir, function(dirExists) {\n        if (!dirExists) {\n          return createDir();\n        }\n        return pidFileExists();\n      });\n    };\n    createDir = function() {\n      return fs.mkdir(dir, 0x1c0, function(err) {\n        if (err) {\n          return callback(err);\n        }\n        return pidFileExists();\n      });\n    };\n    pidFileExists = function() {\n      return exists(options.pidfile, function(pidFileExists) {\n        return callback(null, options.pidfile, pidFileExists);\n      });\n    };\n    return start();\n  },\n  /*\n  \n    `running(pid, callback)`\n    ------------------------\n  \n    Test if a pid match a running process.\n  \n    `pid`           , Process id to test\n  \n    `callback`      , Received arguments are:\n    *   `err`       , Error if any\n    *   `running`   , True if pid match a running process\n  */\n\n  running: function(pid, callback) {\n    return exec(\"ps -ef \" + pid + \" | grep -v PID\", function(err, stdout, stderr) {\n      if (err && err.code !== 1) {\n        return callback(err);\n      }\n      return callback(null, !err);\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/plugins/coffee.js":"// Generated by CoffeeScript 1.4.0\nvar enrichFiles, fs, start_stop;\n\nfs = require('fs');\n\nstart_stop = require('../start_stop');\n\nenrichFiles = function(files) {\n  return files.split(' ').map(function(file) {\n    if (file.substr(0, 1) !== '/') {\n      file = '/' + file;\n    }\n    if (file.substr(-1, 1) !== '/' && fs.statSync(file).isDirectory()) {\n      file += '/';\n    }\n    return file;\n  }).join(' ');\n};\n\n/*\n\nCoffeeScript plugin\n===================\n\nStart Coffee in `--watch` mode, so scripts are instantly compiled into Javascript.\n\nOptions:\n\n-   `src`      , Directory where \".coffee\" are stored. Each \".coffee\" script will be compiled into a .js JavaScript file of the same name.\n-   `join`     , Before compiling, concatenate all scripts together in the order they were passed, and write them into the specified file. Useful for building large projects.\n-   `output`   , Directory where compiled JavaScript files are written. Used in conjunction with \"compile\".\n-   `lint`     , If the `jsl` (JavaScript Lint) command is installed, use it to check the compilation of a CoffeeScript file.\n-   `require`  , Load a library before compiling or executing your script. Can be used to hook in to the compiler (to add Growl notifications, for example).\n-   `detached` , Wether the Coffee process should be attached to the current process. If not defined, default to `false` (the server doesn't run as a daemon).\n-   `pidfile`  , Path to the file storing the daemon process id. Defaults to `\"/.node_shell/#{md5}.pid\"`\n-   `stdout`   , Writable stream or file path to redirect cloud9 stdout.\n-   `stderr`   , Writable stream or file path to redirect cloud9 stderr.\n-   `workspace`, Project directory used to resolve relative paths.\n\nExample:\n\n```javascript\nvar app = new shell();\napp.configure(function() {\n  app.use(shell.router({\n    shell: app\n  }));\n  app.use(shell.coffee({\n    shell: app\n  }));\n  app.use(shell.help({\n    shell: app,\n    introduction: true\n  }));\n});\n```\n*/\n\n\nmodule.exports = function(settings) {\n  var cmd, shell, _ref;\n  if (settings == null) {\n    settings = {};\n  }\n  if (!settings.shell) {\n    throw new Error('No shell provided');\n  }\n  shell = settings.shell;\n  if ((_ref = settings.workspace) == null) {\n    settings.workspace = shell.set('workspace');\n  }\n  if (!settings.workspace) {\n    throw new Error('No workspace provided');\n  }\n  cmd = function() {\n    var args;\n    args = [];\n    if (settings.join) {\n      args.push('-j');\n      args.push(enrichFiles(settings.join));\n    }\n    args.push('-w');\n    if (settings.lint) {\n      args.push('-l');\n    }\n    if (settings.require) {\n      args.push('-r');\n      args.push(settings.require);\n    }\n    args.push('-b');\n    if (settings.output) {\n      args.push('-o');\n      args.push(enrichFiles(settings.output));\n    }\n    if (!settings.compile) {\n      settings.compile = settings.workspace;\n    }\n    if (settings.compile) {\n      args.push('-c');\n      args.push(enrichFiles(settings.compile));\n    }\n    return cmd = 'coffee ' + args.join(' ');\n  };\n  settings.cmd = cmd();\n  shell.cmd('coffee start', 'Start CoffeeScript', function(req, res, next) {\n    return start_stop.start(settings, function(err, pid) {\n      var message;\n      if (err) {\n        return next(err);\n      }\n      if (!pid) {\n        return res.cyan('Already Started').ln();\n      }\n      message = \"CoffeeScript started\";\n      res.cyan(message).ln();\n      return res.prompt();\n    });\n  });\n  return shell.cmd('coffee stop', 'Stop CoffeeScript', function(req, res, next) {\n    return start_stop.stop(settings, function(err, success) {\n      if (success) {\n        res.cyan('CoffeeScript successfully stoped').ln();\n      } else {\n        res.magenta('CoffeeScript was not started').ln();\n      }\n      return res.prompt();\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/plugins/completer.js":"// Generated by CoffeeScript 1.4.0\n/*\n\nCompleter plugin\n================\n\nProvides tab completion. Options passed during creation are:\n\n-   `shell`  , (required) A reference to your shell application.\n*/\n\nmodule.exports = function(settings) {\n  var shell;\n  if (!settings.shell) {\n    throw new Error('No shell provided');\n  }\n  shell = settings.shell;\n  if (!shell.isShell) {\n    return;\n  }\n  shell[\"interface\"]().completer = function(text, cb) {\n    var command, route, routes, suggestions, _i, _len;\n    suggestions = [];\n    routes = shell.routes;\n    for (_i = 0, _len = routes.length; _i < _len; _i++) {\n      route = routes[_i];\n      command = route.command;\n      if (command.substr(0, text.length) === text) {\n        suggestions.push(command);\n      }\n    }\n    return cb(false, [suggestions, text]);\n  };\n  return null;\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/plugins/error.js":"// Generated by CoffeeScript 1.4.0\n\nmodule.exports = function(settings) {\n  var shell;\n  if (!settings.shell) {\n    throw new Error('No shell provided');\n  }\n  shell = settings.shell;\n  shell.on('error', function() {});\n  return function(err, req, res, next) {\n    var k, v;\n    if (err.message) {\n      res.red(err.message).ln();\n    }\n    if (err.stack) {\n      res.red(err.stack).ln();\n    }\n    for (k in err) {\n      v = err[k];\n      if (k === 'message') {\n        continue;\n      }\n      if (k === 'stack') {\n        continue;\n      }\n      if (typeof v === 'function') {\n        continue;\n      }\n      res.magenta(k).white(': ').red(v).ln();\n    }\n    return res.prompt();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/plugins/help.js":"// Generated by CoffeeScript 1.4.0\nvar pad;\n\npad = require('pad');\n\n/*\n\nHelp Plugin\n-----------\n\nDisplay help when the user types \"help\" or runs commands without arguments. \nCommand help is only displayed if a description was provided during the \ncommand registration. Additionnaly, a new `shell.help()` function is made available. \n\nOptions passed during creation are:\n\n-   `shell`        , (required) A reference to your shell application.\n-   `introduction` , Print message 'Type \"help\" or press enter for a list of commands' if boolean `true`, or a custom message if a `string`\n\nUsage\n\n  app = shell()\n  app.configure ->\n    app.use shell.router shell: app\n    app.use shell.help\n      shell: app\n      introduction: true\n*/\n\n\nmodule.exports = function(settings) {\n  var shell, text;\n  if (!settings.shell) {\n    throw new Error('No shell provided');\n  }\n  shell = settings.shell;\n  shell.help = function(req, res, next) {\n    var route, routes, text, _i, _len;\n    res.cyan('Available commands:');\n    res.ln();\n    routes = shell.routes;\n    for (_i = 0, _len = routes.length; _i < _len; _i++) {\n      route = routes[_i];\n      text = pad(route.command, 20);\n      if (route.description) {\n        res.cyan(text).white(route.description).ln();\n      }\n    }\n    return res.prompt();\n  };\n  shell.cmd('help', 'Show this message', shell.help.bind(shell));\n  shell.cmd('', shell.help.bind(shell));\n  if (shell.isShell && settings.introduction) {\n    text = typeof settings.introduction === 'string' ? settings.introduction : 'Type \"help\" or press enter for a list of commands';\n    return shell.styles.println(text);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/plugins/history.js":"// Generated by CoffeeScript 1.4.0\nvar Interface, crypto, fs, hash;\n\nfs = require('fs');\n\ncrypto = require('crypto');\n\nInterface = require('readline').Interface;\n\nhash = function(value) {\n  return crypto.createHash('md5').update(value).digest('hex');\n};\n\n/*\n\nHistory plugin\n==============\n\nPersistent command history over multiple sessions. Options passed during creation are:\n\n-   `shell`  , (required) A reference to your shell application.\n-   `name`   , Identify your project history file, default to the hash of the exectuted file\n-   `dir`    , Location of the history files, defaults to `\"#{process.env['HOME']}/.node_shell\"`\n*/\n\n\nmodule.exports = function(settings) {\n  var file, json, shell, stream, _ref, _ref1;\n  if (!settings.shell) {\n    throw new Error('No shell provided');\n  }\n  shell = settings.shell;\n  if (!settings.shell.isShell) {\n    return;\n  }\n  if ((_ref = settings.dir) == null) {\n    settings.dir = \"\" + process.env['HOME'] + \"/.node_shell\";\n  }\n  if ((_ref1 = settings.name) == null) {\n    settings.name = hash(process.argv[1]);\n  }\n  file = \"\" + settings.dir + \"/\" + settings.file;\n  if (!fs.existsSync(settings.dir)) {\n    fs.mkdirSync(settings.dir, 0x1c0);\n  }\n  if (fs.existsSync(file)) {\n    try {\n      json = fs.readFileSync(file, 'utf8') || '[]';\n      settings.shell[\"interface\"]().history = JSON.parse(json);\n    } catch (e) {\n      settings.shell.styles.red('Corrupted history file').ln();\n    }\n  }\n  stream = fs.createWriteStream(file, {\n    flag: 'w'\n  });\n  Interface.prototype._addHistory = (function(parent) {\n    return function() {\n      var buffer;\n      if (this.history.length) {\n        buffer = new Buffer(JSON.stringify(this.history));\n        fs.write(stream.fd, buffer, 0, buffer.length, 0);\n      }\n      return parent.apply(this, arguments);\n    };\n  })(Interface.prototype._addHistory);\n  return null;\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/plugins/http.js":"// Generated by CoffeeScript 1.4.0\nvar existsSync, fs, path, start_stop;\n\nfs = require('fs');\n\npath = require('path');\n\nexistsSync = fs.existsSync || path.existsSync;\n\nstart_stop = require('../start_stop');\n\n/*\n\nHTTP server\n===========\n\nRegister two commands, `http start` and `http stop`. The start command will \nsearch for \"./server.js\" and \"./app.js\" (and additionnaly their CoffeeScript \nalternatives) to run by `node`.\n\nThe following properties may be provided as settings:\n\n-   `message_start` Message to display once the server is started\n-   `message_stop`  Message to display once the server is stoped\n-   `workspace`     Project directory used to resolve relative paths and search for \"server\" and \"app\" scripts.\n-   `cmd`           Command to start the server, not required if path is provided or if the script is discoverable\n-   `path`          Path to the js/coffee script starting the process, may be relative to the workspace, extension isn't required.\n\nProperties derived from the start_stop utility:   \n\n-   `detached`      Wether the HTTP process should be attached to the current process. If not defined, default to `false` (the server doesn't run as a daemon).\n-   `pidfile`       Path to the file storing the daemon process id. Defaults to `\"/.node_shell/#{md5}.pid\"`\n-   `stdout`        Writable stream or file path to redirect the server stdout.\n-   `stderr`        Writable stream or file path to redirect the server stderr.\n\nExample:\n\n```javascript\nvar app = new shell();\napp.configure(function() {\n  app.use(shell.router({\n    shell: app\n  }));\n  app.use(shell.http({\n    shell: app\n  }));\n  app.use(shell.help({\n    shell: app,\n    introduction: true\n  }));\n});\n```\n*/\n\n\nmodule.exports = function() {\n  var cmd, http, route, settings;\n  settings = {};\n  cmd = function() {\n    var search, searchs, _i, _len;\n    searchs = settings.path ? [settings.path] : ['app', 'server', 'lib/app', 'lib/server'];\n    for (_i = 0, _len = searchs.length; _i < _len; _i++) {\n      search = searchs[_i];\n      search = path.resolve(settings.workspace, search);\n      if (existsSync(\"\" + search)) {\n        if (search.substr(-4) === '.coffee') {\n          return \"coffee \" + search;\n        } else {\n          return \"node \" + search;\n        }\n      }\n      if (existsSync(\"\" + search + \".js\")) {\n        return \"node \" + search + \".js\";\n      } else if (existsSync(\"\" + search + \".coffee\")) {\n        return \"coffee \" + search + \".coffee\";\n      }\n    }\n    throw new Error('Failed to discover a \"server.js\" or \"app.js\" file');\n  };\n  http = null;\n  route = function(req, res, next) {\n    var app, _ref, _ref1, _ref2;\n    app = req.shell;\n    if (app.tmp.http) {\n      return next();\n    }\n    app.tmp.http = true;\n    if ((_ref = settings.workspace) == null) {\n      settings.workspace = app.set('workspace');\n    }\n    if (!settings.workspace) {\n      throw new Error('No workspace provided');\n    }\n    if ((_ref1 = settings.message_start) == null) {\n      settings.message_start = 'HTTP server successfully started';\n    }\n    if ((_ref2 = settings.message_stop) == null) {\n      settings.message_stop = 'HTTP server successfully stopped';\n    }\n    if (!settings.cmd) {\n      settings.cmd = cmd();\n    }\n    app.cmd('http start', 'Start HTTP server', function(req, res, next) {\n      return http = start_stop.start(settings, function(err, pid) {\n        if (err) {\n          return next(err);\n        }\n        if (!pid) {\n          return res.cyan('HTTP server already started').ln() && res.prompt();\n        }\n        res.cyan(settings.message_start).ln();\n        return res.prompt();\n      });\n    });\n    app.cmd('http stop', 'Stop HTTP server', function(req, res, next) {\n      return start_stop.stop(settings, function(err, success) {\n        if (success) {\n          res.cyan(settings.message_stop).ln();\n        } else {\n          res.magenta('HTTP server was not started').ln();\n        }\n        return res.prompt();\n      });\n    });\n    return next();\n  };\n  if (arguments.length === 1) {\n    settings = arguments[0];\n    return route;\n  } else {\n    return route.apply(null, arguments);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/plugins/router.js":"// Generated by CoffeeScript 1.4.0\nvar match, normalize, querystring, utils,\n  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nutils = require('../utils');\n\nquerystring = {\n  unescape: function(str) {\n    return decodeURIComponent(str);\n  },\n  parse: function(qs, sep, eq) {\n    var k, kvp, obj, v, vkps, x, _i, _len, _ref;\n    sep = sep || '&';\n    eq = eq || '=';\n    obj = {};\n    if (typeof qs !== 'string') {\n      return obj;\n    }\n    vkps = qs.split(sep);\n    for (_i = 0, _len = vkps.length; _i < _len; _i++) {\n      kvp = vkps[_i];\n      x = kvp.split(eq);\n      k = querystring.unescape(x[0], true);\n      v = querystring.unescape(x.slice(1).join(eq), true);\n      if (_ref = !k, __indexOf.call(obj, _ref) >= 0) {\n        obj[k] = v;\n      } else if (!Array.isArray(obj[k])) {\n        obj[k] = [obj[k], v];\n      } else {\n        obj[k].push(v);\n      }\n    }\n    return obj;\n  }\n};\n\nnormalize = function(command, keys, sensitive) {\n  command = command.concat('/?').replace(/\\/\\(/g, '(?:/').replace(/:(\\w+)(\\(.*\\))?(\\?)?/g, function(_, key, format, optional) {\n    keys.push(key);\n    format = format || '([^ ]+)';\n    optional = optional || '';\n    return format + optional;\n  }).replace(/([\\/.])/g, '\\\\$1').replace(/\\*/g, '(.+)');\n  return new RegExp('^' + command + '$', (sensitive != null ? 'i' : void 0));\n};\n\nmatch = function(req, routes, i) {\n  var captures, index, j, key, keys, regexp, route, val;\n  if (i == null) {\n    i = 0;\n  }\n  while (i < routes.length) {\n    route = routes[i];\n    regexp = route.regexp;\n    keys = route.keys;\n    captures = regexp.exec(req.command);\n    if (captures) {\n      route.params = {};\n      index = 0;\n      j = 1;\n      while (j < captures.length) {\n        key = keys[j - 1];\n        val = typeof captures[j] === 'string' ? querystring.unescape(captures[j]) : captures[j];\n        if (key) {\n          route.params[key] = val;\n        } else {\n          route.params['' + index] = val;\n          index++;\n        }\n        j++;\n      }\n      req._route_index = i;\n      return route;\n    }\n    i++;\n  }\n  return null;\n};\n\nmodule.exports = function(settings) {\n  var params, routes, shell, _ref;\n  if (!settings.shell) {\n    throw new Error('No shell provided');\n  }\n  shell = settings.shell;\n  if ((_ref = settings.sensitive) == null) {\n    settings.sensitive = true;\n  }\n  routes = shell.routes = [];\n  params = {};\n  shell.param = function(name, fn) {\n    if (Array.isArray(name)) {\n      name.forEach(function(name) {\n        return this.param(name, fn);\n      }, this);\n    } else {\n      if (':' === name[0]) {\n        name = name.substr(1);\n      }\n      params[name] = fn;\n    }\n    return this;\n  };\n  shell.cmd = function(command, description, middleware1, middleware2, fn) {\n    var args, keys, route;\n    args = Array.prototype.slice.call(arguments);\n    route = {};\n    route.command = args.shift();\n    if (typeof args[0] === 'string') {\n      route.description = args.shift();\n    }\n    route.middlewares = utils.flatten(args);\n    keys = [];\n    route.regexp = route.command instanceof RegExp ? route.command : normalize(route.command, keys, settings.sensitive);\n    route.keys = keys;\n    routes.push(route);\n    return this;\n  };\n  shell.cmd('quit', 'Exit this shell', shell.quit.bind(shell));\n  return function(req, res, next) {\n    var i, pass, route, self;\n    route = null;\n    self = this;\n    i = 0;\n    pass = function(i) {\n      var keys, param;\n      route = match(req, routes, i);\n      if (!route) {\n        return next();\n      }\n      i = 0;\n      keys = route.keys;\n      req.params = route.params;\n      param = function(err) {\n        var fn, key, nextMiddleware, val;\n        try {\n          key = keys[i++];\n          val = req.params[key];\n          fn = params[key];\n          if ('route' === err) {\n            return pass(req._route_index + 1);\n          } else if (err) {\n            return next(err);\n          } else if (fn) {\n            if (1 === fn.length) {\n              req.params[key] = fn(val);\n              return param();\n            } else {\n              return fn(req, res, param, val);\n            }\n          } else if (!key) {\n            i = 0;\n            nextMiddleware = function(err) {\n              fn = route.middlewares[i++];\n              if ('route' === err) {\n                return pass(req._route_index + 1);\n              } else if (err) {\n                return next(err);\n              } else if (fn) {\n                return fn(req, res, nextMiddleware);\n              } else {\n                return pass(req._route_index + 1);\n              }\n            };\n            return nextMiddleware();\n          } else {\n            return param();\n          }\n        } catch (err) {\n          return next(err);\n        }\n      };\n      return param();\n    };\n    return pass();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/plugins/redis.js":"// Generated by CoffeeScript 1.4.0\nvar start_stop;\n\nstart_stop = require('../start_stop');\n\n/*\nRedis Plugin\n============\n\nRegister two commands, `redis start` and `redis stop`. The following properties may be provided as settings:\n\n-   `config`   , Path to the configuration file. Required to launch redis.\n-   `detached` , Wether the Redis process should be attached to the current process. If not defined, default to `false` (the server doesn't run as a daemon).\n-   `pidfile`  , Path to the file storing the daemon process id. Defaults to `\"/.node_shell/#{md5}.pid\"`\n-   `stdout`   , Writable stream or file path to redirect cloud9 stdout.\n-   `stderr`   , Writable stream or file path to redirect cloud9 stderr.\n\nExample:\n  \n```javascript\nvar app = shell();\napp.configure(function() {\n  app.use(shell.router({\n    shell: app\n  }));\n  app.use(shell.redis({\n    shell: app,\n    config: __dirname+'/redis.conf')\n  }));\n  app.use(shell.help({\n    shell: app,\n    introduction: true\n  }));\n});\n```\n*/\n\n\nmodule.exports = function() {\n  var redis, route, settings;\n  settings = {};\n  redis = null;\n  route = function(req, res, next) {\n    var app, _ref, _ref1;\n    app = req.shell;\n    if (app.tmp.redis) {\n      return next();\n    }\n    app.tmp.redis = true;\n    if ((_ref = settings.workspace) == null) {\n      settings.workspace = app.set('workspace');\n    }\n    if ((_ref1 = settings.config) == null) {\n      settings.config = '';\n    }\n    settings.cmd = \"redis-server \" + settings.config;\n    app.cmd('redis start', 'Start Redis', function(req, res, next) {\n      return redis = start_stop.start(settings, function(err, pid) {\n        if (err) {\n          return next(err);\n        }\n        if (!pid) {\n          res.cyan('Redis already started').ln();\n          return res.prompt();\n        }\n        res.cyan('Redis started').ln();\n        return res.prompt();\n      });\n    });\n    app.cmd('redis stop', 'Stop Redis', function(req, res, next) {\n      return start_stop.stop(settings, function(err, success) {\n        if (success) {\n          res.cyan('Redis successfully stoped').ln();\n        } else {\n          res.magenta('Redis was not started').ln();\n        }\n        return res.prompt();\n      });\n    });\n    return next();\n  };\n  if (arguments.length === 1) {\n    settings = arguments[0];\n    return route;\n  } else {\n    return route.apply(null, arguments);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/plugins/stylus.js":"// Generated by CoffeeScript 1.4.0\nvar enrichFiles, path, start_stop;\n\npath = require('path');\n\nstart_stop = require('../start_stop');\n\nenrichFiles = function(files) {\n  return files.split(' ').map(function(file) {\n    path.normalize(file);\n    if (file.substr(-1, 1) === '/') {\n      file = file.substr(0, file.length - 1);\n    }\n    return file;\n  }).join(' ');\n};\n\n/*\n\nStylus plugin\n-------------\nStart/stop a daemon to watch and convert stylus files to css.   \n\nOptions include:   \n*   `output`  Output to <dir> when passing files.\n*   `input`   Add <path> to lookup paths\n*/\n\n\nmodule.exports = function(settings) {\n  var cmd, shell, _ref;\n  if (settings == null) {\n    settings = {};\n  }\n  if (!settings.shell) {\n    throw new Error('No shell provided');\n  }\n  shell = settings.shell;\n  if ((_ref = settings.workspace) == null) {\n    settings.workspace = shell.set('workspace');\n  }\n  if (!settings.workspace) {\n    throw new Error('No workspace provided');\n  }\n  cmd = function() {\n    var args;\n    args = [];\n    args.push('-w');\n    if (settings.use) {\n      args.push('-u');\n      args.push(enrichFiles(settings.use));\n    }\n    if (settings.output) {\n      args.push('-o');\n      args.push(enrichFiles(settings.output));\n    }\n    if (!settings.input) {\n      settings.input = settings.workspace;\n    }\n    if (settings.input) {\n      args.push(enrichFiles(settings.input));\n    }\n    return cmd = 'stylus ' + args.join(' ');\n  };\n  settings.cmd = cmd();\n  shell.cmd('stylus start', 'Start CoffeeScript', function(req, res, next) {\n    return start_stop.start(settings, function(err, pid) {\n      var message;\n      if (err) {\n        return next(err);\n      }\n      if (!pid) {\n        return res.cyan('Already Started').ln();\n      }\n      message = \"Stylus started\";\n      res.cyan(message).ln();\n      return res.prompt();\n    });\n  });\n  return shell.cmd('stylus stop', 'Stop Stylus', function(req, res, next) {\n    return start_stop.stop(settings, function(err, success) {\n      if (success) {\n        res.cyan('Stylus successfully stoped').ln();\n      } else {\n        res.magenta('Stylus was not started').ln();\n      }\n      return res.prompt();\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/plugins/test.js":"// Generated by CoffeeScript 1.4.0\nvar exec, existsSync, fs, path;\n\nfs = require('fs');\n\npath = require('path');\n\nexistsSync = fs.existsSync || path.existsSync;\n\nexec = require('child_process').exec;\n\nmodule.exports = function(settings) {\n  var shell, _ref, _ref1;\n  if (!settings.shell) {\n    throw new Error('No shell provided');\n  }\n  shell = settings.shell;\n  if ((_ref = settings.workspace) == null) {\n    settings.workspace = shell.set('workspace');\n  }\n  if (!settings.workspace) {\n    throw new Error('No workspace provided');\n  }\n  if ((_ref1 = settings.glob) == null) {\n    settings.glob = 'test/*.js';\n  }\n  shell.cmd('test', 'Run all test', function(req, res, next) {\n    var p, paths, run, _i, _len;\n    run = function(cmd) {\n      var args, expresso;\n      args = [];\n      args.push(cmd);\n      if (settings.coverage) {\n        args.push('--cov');\n      }\n      if (settings.serial) {\n        args.push('--serial');\n      }\n      if (settings.glob) {\n        args.push(settings.glob);\n      }\n      expresso = exec('cd ' + settings.workspace + ' && ' + args.join(' '));\n      expresso.stdout.on('data', function(data) {\n        return res.cyan(data);\n      });\n      expresso.stderr.on('data', function(data) {\n        return res.magenta(data);\n      });\n      return expresso.on('exit', function(code) {\n        return res.prompt();\n      });\n    };\n    paths = [].concat(module.paths, require.paths);\n    for (_i = 0, _len = paths.length; _i < _len; _i++) {\n      p = paths[_i];\n      if (existsSync(p + '/expresso/bin/expresso')) {\n        return run(p);\n      }\n    }\n    res.magenta('Expresso not found').ln();\n    return res.prompt();\n  });\n  return shell.cmd('test :pattern', 'Run specific tests', function(req, res, next) {});\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/routes/confirm.js":"// Generated by CoffeeScript 1.4.0\n/*\n\nConfirm route\n=============\n\nThe `confirm` route ask the user if he want to continue the process. If the answer is `true`, the following routes are executed. Otherwise, the process is stoped.\n\n```javascript\nvar app = new shell();\napp.configure(function() {\n  app.use(shell.router({\n    shell: app\n  }));\n});\napp.cmd('install', [\n  shell.routes.confirm('Do you confirm?'),\n  my_app.routes.download,\n  my_app.routes.configure\n]);\n```\n*/\n\nmodule.exports = function(message) {\n  return function(req, res, next) {\n    return req.confirm(message, true, function(confirmed) {\n      if (!confirmed) {\n        return res.prompt();\n      }\n      return next();\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/routes/prompt.js":"// Generated by CoffeeScript 1.4.0\n/*\n\nPrompt route\n============\n\nThe `prompt` route is a convenient function to stop command once a few routes are executed. You can simply pass the the `shell.routes.prompt` function or call it with a message argument.\n\n```javascript\nvar app = new shell();\napp.configure(function() {\n  app.use(shell.router({\n    shell: app\n  }));\n});\napp.cmd('install', [\n  my_app.routes.download,\n  my_app.routes.configure,\n  shell.routes.prompt('Installation is finished')\n]);\n```\n*/\n\nmodule.exports = function(req, res, next) {\n  var message;\n  if (arguments.length === 1) {\n    message = arguments[0];\n    return function(req, res, next) {\n      res.white(message);\n      res.ln();\n      return res.prompt();\n    };\n  } else {\n    return res.prompt();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/routes/shellOnly.js":"// Generated by CoffeeScript 1.4.0\n/*\n\n`routes.shellOnly`\n==================\n\nEnsure the current process is running in shell mode.\n*/\n\nmodule.exports = function(req, res, next) {\n  if (!req.shell.isShell) {\n    res.red('Command may only be executed inside a running shell');\n    res.prompt();\n    return;\n  }\n  return next();\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/lib/routes/timeout.js":"// Generated by CoffeeScript 1.4.0\n/*\n\nTimeout route\n=============\n\nThe `timeout` route will wait for the provided period (in millisenconds) before executing the following route.\n\n```javascript\nvar app = new shell();\napp.configure(function() {\n  app.use(shell.router({\n    shell: app\n  }));\n});\napp.cmd('restart', [\n  my_app.routes.stop,\n  shell.routes.timeout(1000),\n  my_app.routes.start\n]);\n```\n*/\n\nmodule.exports = function(timeout) {\n  return function(req, res, next) {\n    return setTimeout(timeout, next);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/samples/cloud9/sample.js":"#!/usr/bin/env node\n\n    var shell = require('shell');\n    \n    var app = shell();\n    \n    app.configure(function() {\n        app.use(shell.history({\n            shell: app\n        }));\n        app.use(shell.cloud9({\n            ip: '0.0.0.0',\n            port: '8999',\n            stdout: __dirname+'/cloud9.out.log',\n            stderr: __dirname+'/cloud9.err.log',\n            pidfile: __dirname+'/cloud9.pid',\n            detached: true\n        }));\n        app.use(shell.router({\n            shell: app\n        }));\n        app.use(shell.help({\n            shell: app,\n            introduction: true\n        }));\n    });\n    ","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/samples/http/app.js":"\nvar express = require('express');\n\nvar app = module.exports = express.createServer();\n\napp.configure(function(){\n    app.use(express.favicon());\n    app.use(express.methodOverride());\n    app.use(express.bodyParser());\n    app.use(express.cookieParser());\n    app.use(express.session({secret:'my key'}));\n    app.use(app.router);\n    app.use(express.errorHandler({ showStack: true, dumpExceptions: true }));\n});\n\napp.get('/', function(req, res, next){\n    res.send('Welcome');\n});\n\napp.listen(3000);","/home/travis/build/npmtest/node-npmtest-shell/node_modules/shell/samples/params/ami.js":"#!/usr/bin/env node\n\n    var shell = require('../..');\n    var exec = require('child_process').exec;\n\n    var app = shell();\n    app.configure(function(){\n        app.use(shell.router({\n            shell: app\n        }));\n    });\n    // Route middleware\n    var auth = function(req, res, next){\n    \tif(req.params.uid == process.getuid()){\n    \t\tnext()\n    \t}else{\n    \t\tthrow new Error('Not me');\n    \t}\n    }\n    // Global parameter substitution\n    app.param('uid', function(req, res, next){\n    \texec('whoami', function(err, stdout, sdterr){\n    \t\treq.params.username = stdout;\n    \t\tnext();\n    \t});\n    });\n    // Simple command\n    app.cmd('help', function(req, res){\n    \tres.cyan('Run this command `./ami user ' + process.getuid() + '`');\n    \tres.prompt()\n    });\n    // Command with parameter and two route middlewares\n    app.cmd('user :uid', auth, function(req, res){\n    \tres.cyan('Yes, you are ' + req.params.username);\n    });\n"}